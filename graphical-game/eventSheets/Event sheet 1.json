{
	"name": "Event sheet 1",
	"events": [
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "every-tick",
					"objectClass": "System",
					"sid": 718405711193279
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "const G = 100000;\nconst MIN_DISTANCE_FOR_GRAVITY = 20;\n\nfunction distance(a, b) {\n\treturn Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n}\n\nconst planets = runtime.objects['Planet'].getAllInstances();\nconst ship = runtime.objects['Ship'].getFirstInstance();\n\nfor (const planet of planets) {\n\tconst dist = distance(planet, ship);\n\t// apply gravity from planet to ship\n\tlet force = 0;\n\t//if (dist > MIN_DISTANCE_FOR_GRAVITY) {\n\t\tforce = G / (dist * dist);\n\t//} else {\n\t//\tconst peak = G / (MIN_DISTANCE_FOR_GRAVITY ** 2);\n\t//\tforce = (peak / MIN_DISTANCE_FOR_GRAVITY) * dist;\n\t//}\n\tship.behaviors.Physics.applyForceTowardPosition(force, planet.x, planet.y);\n}"
				},
				{
					"id": "set-angle",
					"objectClass": "Ship",
					"sid": 358705661317524,
					"parameters": {
						"angle": "angle(0, 0, Ship.Physics.VelocityX, Ship.Physics.VelocityY)+90"
					}
				},
				{
					"id": "spawn-another-object",
					"objectClass": "Ship",
					"sid": 434922226436068,
					"parameters": {
						"object": "Dot",
						"layer": "0",
						"image-point": "1",
						"create-hierarchy": false
					}
				}
			],
			"sid": 503247962209776
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-start-of-layout",
					"objectClass": "System",
					"sid": 996317725265852
				}
			],
			"actions": [
				{
					"id": "set-world-gravity",
					"objectClass": "Ship",
					"sid": 223011129540506,
					"behaviorType": "Physics",
					"parameters": {
						"gravity": "0"
					}
				},
				{
					"id": "set-velocity",
					"objectClass": "Ship",
					"sid": 581383870457197,
					"behaviorType": "Physics",
					"parameters": {
						"x-component": "100",
						"y-component": "-100"
					}
				},
				{
					"id": "set-stepping-iterations",
					"objectClass": "Ship",
					"sid": 132773688272553,
					"behaviorType": "Physics",
					"parameters": {
						"velocity-iterations": "80",
						"position-iterations": "30"
					}
				}
			],
			"sid": 975473476057710
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "compare-instance-variable",
					"objectClass": "Dot",
					"sid": 120304159366321,
					"parameters": {
						"instance-variable": "Age",
						"comparison": 4,
						"value": "180"
					}
				}
			],
			"actions": [
				{
					"id": "destroy",
					"objectClass": "Dot",
					"sid": 933909067402943
				}
			],
			"sid": 269382496082135
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "every-tick",
					"objectClass": "System",
					"sid": 813301050138295
				}
			],
			"actions": [
				{
					"id": "add-to-instvar",
					"objectClass": "Dot",
					"sid": 114275062553516,
					"parameters": {
						"instance-variable": "Age",
						"value": "1"
					}
				}
			],
			"sid": 712990748759412
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-key-pressed",
					"objectClass": "Keyboard",
					"sid": 939793218031733,
					"parameters": {
						"key": 32
					}
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "const G = 100000;\nconst MAX_DISTANCE_FOR_ORBIT = 150;\n\nfunction distance(a, b) {\n\treturn Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n}\n\nconst planets = runtime.objects['Planet'].getAllInstances();\nconst ship = runtime.objects['Ship'].getFirstInstance();\nconst closestPlanet = planets.sort((p1, p2) => distance(p1, ship) - distance(p2, ship))[0];\nconst closestDistance = distance(closestPlanet, ship);\n\nif (closestDistance < MAX_DISTANCE_FOR_ORBIT) {\n\t// compute vector from ship to planet\n\tconst shipToPlanet = [closestPlanet.x - ship.x, closestPlanet.y - ship.y];\n\tconsole.log(shipToPlanet);\n\t// normalize it\n\tshipToPlanet[0] /= closestDistance;\n\tshipToPlanet[1] /= closestDistance;\n\tconsole.log(shipToPlanet);\n\t// rotate 90 degrees CW\n\tconst orbitDirection = [shipToPlanet[1], -shipToPlanet[0]];\n\tconsole.log(ship.behaviors.Physics);\n\tconst orbitVelocity = Math.sqrt(G * (1 + ship.behaviors.Physics.mass) / closestDistance);\n\tconsole.log(orbitVelocity);\n\tship.behaviors.Physics.setVelocity(orbitDirection[0] * orbitVelocity, orbitDirection[1] * orbitVelocity);\n}"
				}
			],
			"sid": 156261243726830
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-key-released",
					"objectClass": "Keyboard",
					"sid": 563783083550944,
					"parameters": {
						"key": 32
					}
				}
			],
			"actions": [
				{
					"type": "script",
					"script": ""
				}
			],
			"sid": 510680097101608
		}
	],
	"sid": 914229451466728
}