{
	"name": "Event sheet 1",
	"events": [
		{
			"eventType": "variable",
			"name": "G",
			"type": "number",
			"initialValue": "3000000",
			"comment": "gravitational constant",
			"isStatic": false,
			"isConstant": true,
			"sid": 676538581334769
		},
		{
			"eventType": "variable",
			"name": "minGravityDistance",
			"type": "number",
			"initialValue": "20",
			"comment": "minimum distance where full force of gravity is applied (below this distance, the force scales down until it reaches 0 at distance 0)",
			"isStatic": false,
			"isConstant": true,
			"sid": 121730032563940
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "every-tick",
					"objectClass": "System",
					"sid": 718405711193279
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "function distance(a, b) {\n\treturn Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n}\n\nconst planets = runtime.objects['Planet'].getAllInstances();\nconst ship = runtime.objects['Ship'].getFirstInstance();\n\nlet accelX = 0;\nlet accelY = 0;\n\nfor (const planet of planets) {\n\tconst dist = distance(planet, ship);\n\t// apply gravity from planet to ship\n\tlet force = 0;\n\tif (dist > runtime.globalVars.minGravityDistance) {\n\t\tforce = runtime.globalVars.G / (dist * dist);\n\t} else {\n\t\tconst peak = runtime.globalVars.G / (runtime.globalVars.minGravityDistance ** 2);\n\t\tforce = (peak / runtime.globalVars.minGravityDistance) * dist;\n\t}\n\n\taccelX += force * (planet.x - ship.x) / dist;\n\taccelY += force * (planet.y - ship.y) / dist;\n}\n\n// move\nship.x += ship.instVars.dx * runtime.dt;\nship.x += 1/2 * accelX * runtime.dt * runtime.dt;\nship.y += ship.instVars.dy * runtime.dt;\nship.y += 1/2 * accelY * runtime.dt * runtime.dt;\n// accelerate\nship.instVars.dx += accelX * runtime.dt;\nship.instVars.dy += accelY * runtime.dt;"
				},
				{
					"id": "spawn-another-object",
					"objectClass": "Ship",
					"sid": 574126332928703,
					"parameters": {
						"object": "Dot",
						"layer": "0",
						"image-point": "0",
						"create-hierarchy": false
					}
				}
			],
			"sid": 503247962209776
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-start-of-layout",
					"objectClass": "System",
					"sid": 996317725265852
				}
			],
			"actions": [],
			"sid": 975473476057710
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "compare-instance-variable",
					"objectClass": "Dot",
					"sid": 120304159366321,
					"parameters": {
						"instance-variable": "Age",
						"comparison": 4,
						"value": "180"
					}
				}
			],
			"actions": [
				{
					"id": "destroy",
					"objectClass": "Dot",
					"sid": 933909067402943
				}
			],
			"sid": 269382496082135
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "every-tick",
					"objectClass": "System",
					"sid": 813301050138295
				}
			],
			"actions": [
				{
					"id": "add-to-instvar",
					"objectClass": "Dot",
					"sid": 114275062553516,
					"parameters": {
						"instance-variable": "Age",
						"value": "1"
					}
				}
			],
			"sid": 712990748759412
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-key-pressed",
					"objectClass": "Keyboard",
					"sid": 939793218031733,
					"parameters": {
						"key": 32
					}
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "/*const G = 3000000;\nconst MAX_DISTANCE_FOR_ORBIT = 150;\n\nfunction distance(a, b) {\n\treturn Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n}\n\nconst planets = runtime.objects['Planet'].getAllInstances();\nconst ship = runtime.objects['Ship'].getFirstInstance();\nconst closestPlanet = planets.sort((p1, p2) => distance(p1, ship) - distance(p2, ship))[0];\nconst closestDistance = distance(closestPlanet, ship);\n\nif (closestDistance < MAX_DISTANCE_FOR_ORBIT) {\n\t// compute vector from ship to planet\n\tconst shipToPlanet = [closestPlanet.x - ship.x, closestPlanet.y - ship.y];\n\tconsole.log(shipToPlanet);\n\t// normalize it\n\tshipToPlanet[0] /= closestDistance;\n\tshipToPlanet[1] /= closestDistance;\n\tconsole.log(shipToPlanet);\n\t// rotate 90 degrees CW\n\tconst orbitDirection = [shipToPlanet[1], -shipToPlanet[0]];\n\tconst orbitVelocity = Math.sqrt(G * 2 / closestDistance);\n\tconsole.log(orbitVelocity);\n\tship.instVars.dx = orbitDirection[0] * orbitVelocity;\n\tship.instVars.dy = orbitDirection[1] * orbitVelocity;\n}*/"
				}
			],
			"sid": 156261243726830
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-key-released",
					"objectClass": "Keyboard",
					"sid": 563783083550944,
					"parameters": {
						"key": 32
					}
				}
			],
			"actions": [
				{
					"type": "script",
					"script": ""
				}
			],
			"sid": 510680097101608
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-click",
					"objectClass": "Mouse",
					"sid": 616347963531998,
					"parameters": {
						"mouse-button": "left",
						"click-type": "clicked"
					}
				}
			],
			"actions": [
				{
					"id": "set-instvar-value",
					"objectClass": "Ship",
					"sid": 137693807888168,
					"parameters": {
						"instance-variable": "dx",
						"value": "Mouse.X - Ship.X"
					}
				},
				{
					"id": "set-instvar-value",
					"objectClass": "Ship",
					"sid": 627365062464814,
					"parameters": {
						"instance-variable": "dy",
						"value": "Mouse.Y - Ship.Y"
					}
				}
			],
			"sid": 888927258255184
		}
	],
	"sid": 914229451466728
}