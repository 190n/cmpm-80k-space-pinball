{
	"name": "Event sheet 1",
	"events": [
		{
			"eventType": "variable",
			"name": "G",
			"type": "number",
			"initialValue": "500000",
			"comment": "gravitational constant",
			"isStatic": false,
			"isConstant": true,
			"sid": 676538581334769
		},
		{
			"eventType": "variable",
			"name": "minGravityDistance",
			"type": "number",
			"initialValue": "20",
			"comment": "minimum distance where full force of gravity is applied (below this distance, the force scales down until it reaches 0 at distance 0)",
			"isStatic": false,
			"isConstant": true,
			"sid": 121730032563940
		},
		{
			"eventType": "variable",
			"name": "maxOrbitDistance",
			"type": "number",
			"initialValue": "150",
			"comment": "Maximum distance you can be from a planet and orbit it",
			"isStatic": false,
			"isConstant": true,
			"sid": 374468720435562
		},
		{
			"eventType": "variable",
			"name": "highestShipPos",
			"type": "number",
			"initialValue": "320",
			"comment": "Highest (lowest Y) position the ship may take on the screen",
			"isStatic": false,
			"isConstant": true,
			"sid": 895585357274453
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "every-tick",
					"objectClass": "System",
					"sid": 718405711193279
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "\nfunction distance(a, b) {\n\treturn Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n}\n\nconst planets = runtime.objects['Planet'].getAllInstances();\nconst ship = runtime.objects['Ship'].getFirstInstance();\n\nlet accelX = 0;\nlet accelY = 0;\n\nfor (const planet of planets) {\n\tconst dist = distance(planet, ship);\n\t// apply gravity from planet to ship\n\tlet force = 0;\n\tif (dist > runtime.globalVars.minGravityDistance) {\n\t\tforce = runtime.globalVars.G / (dist * dist);\n\t} else {\n\t\tconst peak = runtime.globalVars.G / (runtime.globalVars.minGravityDistance ** 2);\n\t\tforce = (peak / runtime.globalVars.minGravityDistance) * dist;\n\t}\n\n\taccelX += force * (planet.x - ship.x) / dist;\n\taccelY += force * (planet.y - ship.y) / dist;\n}\n\n// accelerate\nship.instVars.dx += accelX * runtime.dt;\nship.instVars.dy += accelY * runtime.dt;\n\n// move\nship.x += ship.instVars.dx * runtime.dt;\nif (ship.instVars.dy > 0) {\n\t// move ship down\n    ship.y += ship.instVars.dy * runtime.dt;\n} else if (ship.y > runtime.globalVars.highestShipPos) {\n\t// move ship up\n\tconst movement = ship.instVars.dy * runtime.dt;\n\tif (ship.y + movement < runtime.globalVars.highestShipPos) {\n\t\t// move ship to boundary and move planets to match\n\t\tconst movementForPlanets = -(movement - (runtime.globalVars.highestShipPos - ship.y));\n\t\tfor (const p of planets) {\n\t\t\tp.y += movementForPlanets;\n\t\t}\n\t\tship.y = runtime.globalVars.highestShipPos;\n\t} else {\n\t\tship.y += movement;\n\t}\n} else {\n\t// move planets down\n\tfor (const p of planets) {\n\t\tp.y -= ship.instVars.dy * runtime.dt;\n\t}\n}\n\n// wrap\nship.x %= runtime.layout.width;\nship.x += runtime.layout.width;\nship.x %= runtime.layout.width;"
				},
				{
					"id": "create-object",
					"objectClass": "System",
					"sid": 149811143759977,
					"disabled": true,
					"parameters": {
						"object-to-create": "Dot",
						"layer": "0",
						"x": "Ship.X",
						"y": "Ship.Y",
						"create-hierarchy": false,
						"template-name": "\"\""
					}
				},
				{
					"id": "rotate-toward-position",
					"objectClass": "Ship",
					"sid": 596892352624015,
					"parameters": {
						"degrees": "3",
						"x": "Mouse.X",
						"y": "Mouse.Y"
					}
				}
			],
			"sid": 503247962209776
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-start-of-layout",
					"objectClass": "System",
					"sid": 996317725265852
				}
			],
			"actions": [],
			"sid": 975473476057710
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "compare-instance-variable",
					"objectClass": "Dot",
					"sid": 120304159366321,
					"parameters": {
						"instance-variable": "Age",
						"comparison": 4,
						"value": "180"
					}
				}
			],
			"actions": [
				{
					"id": "destroy",
					"objectClass": "Dot",
					"sid": 933909067402943
				}
			],
			"sid": 269382496082135
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "every-tick",
					"objectClass": "System",
					"sid": 813301050138295
				}
			],
			"actions": [
				{
					"id": "add-to-instvar",
					"objectClass": "Dot",
					"sid": 114275062553516,
					"parameters": {
						"instance-variable": "Age",
						"value": "1"
					}
				}
			],
			"sid": 712990748759412
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-key-pressed",
					"objectClass": "Keyboard",
					"sid": 939793218031733,
					"parameters": {
						"key": 32
					}
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "function distance(a, b) {\n\treturn Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n}\n\nconst planets = runtime.objects['Planet'].getAllInstances();\nconst ship = runtime.objects['Ship'].getFirstInstance();\n\nif (ship.instVars.orbiting) {\n\tship.instVars.orbiting = false;\n\tship.instVars.dx \n}\nlet closestPlanet = planets[0], closestDistance = distance(closestPlanet, ship);\nfor (let i = 1; i < planets.length; i += 1) {\n\tconst thisPlanetDistance = distance(planets[i], ship);\n\tif (thisPlanetDistance < closestDistance) {\n\t\tclosestPlanet = planets[i];\n\t\tclosestDistance = thisPlanetDistance;\n\t}\n}\n\nif (closestDistance < runtime.globalVars.maxOrbitDistance) {\n\n\tship.instVars.orbiting = true;\n\tship.instVars.orbitedPlanet = closestPlanet.uid;\n\n\t// compute vector from ship to planet\n\tconst shipToPlanet = [closestPlanet.x - ship.x, closestPlanet.y - ship.y];\n\tconsole.log(shipToPlanet);\n\t// normalize it\n\tshipToPlanet[0] /= closestDistance;\n\tshipToPlanet[1] /= closestDistance;\n\tconsole.log(shipToPlanet);\n\t\n\t// figure out if we should orbit CW or CCW\n\t// P = (x2 - x1)(y3 - y1) - (y2 - y1)(x3 - x1)\n\t// 1 = planet\n\t// 2 = current ship\n\t// 3 = next ship\n\tconst cross = (ship.x - closestPlanet.x) * (ship.y + ship.instVars.dy - closestPlanet.y)\n\t\t- (ship.y - closestPlanet.y) * (ship.x + ship.instVars.dx - closestPlanet.x);\n\tconst counterclockwise = cross < 0;\n\t\n\t// rotate 90 degrees CW\n\tconst orbitDirection = (counterclockwise\n\t\t? [-shipToPlanet[1], shipToPlanet[0]]\n\t\t: [shipToPlanet[1], -shipToPlanet[0]]);\n\tconst orbitVelocity = Math.sqrt(runtime.globalVars.G * 1 / closestDistance);\n\tconsole.log(orbitVelocity);\n\tconst orbitVec = [orbitDirection[0] * orbitVelocity, orbitDirection[1] * orbitVelocity];\n\tconst dv_x = orbitVec[0] - ship.instVars.dx;\n\tconst dv_y = orbitVec[1] - ship.instVars.dy;\n\tship.instVars.dv = Math.sqrt(dv_x ** 2 + dv_y ** 2);\n\tship.instVars.dx = orbitVec[0];\n\tship.instVars.dy = orbitVec[1];\n}"
				}
			],
			"sid": 156261243726830,
			"children": [
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "is-boolean-instance-variable-set",
							"objectClass": "Ship",
							"sid": 373602350596048,
							"parameters": {
								"instance-variable": "orbiting"
							}
						}
					],
					"actions": [
						{
							"id": "play-by-name",
							"objectClass": "Audio",
							"sid": 649199061364458,
							"parameters": {
								"folder": "sounds",
								"audio-file-name": "\"engine\"",
								"loop": "not-looping",
								"volume": "0",
								"stereo-pan": "0",
								"tag-optional": "\"\""
							}
						},
						{
							"id": "set-animation",
							"objectClass": "Ship",
							"sid": 434777527408427,
							"parameters": {
								"animation": "\"Engine On\"",
								"from": "beginning"
							}
						},
						{
							"id": "wait",
							"objectClass": "System",
							"sid": 448638120480871,
							"parameters": {
								"seconds": "0.25"
							}
						},
						{
							"id": "set-animation",
							"objectClass": "Ship",
							"sid": 251695678107475,
							"parameters": {
								"animation": "\"Engine Off\"",
								"from": "beginning"
							}
						}
					],
					"sid": 422843611809984
				}
			]
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-key-released",
					"objectClass": "Keyboard",
					"sid": 563783083550944,
					"parameters": {
						"key": 32
					}
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "const ship = runtime.objects['Ship'].getFirstInstance();\nif (ship.instVars.orbiting) {\n\tship.instVars.orbiting = false;\n\tconst currentVel = Math.sqrt(ship.instVars.dx ** 2 + ship.instVars.dy ** 2);\n\tconst factor = (currentVel + ship.instVars.dv) / currentVel;\n\tship.instVars.dx *= factor;\n\tship.instVars.dy *= factor;\n}"
				},
				{
					"id": "set-animation",
					"objectClass": "Ship",
					"sid": 169506868163094,
					"parameters": {
						"animation": "\"Engine Off\"",
						"from": "beginning"
					}
				}
			],
			"sid": 510680097101608
		}
	],
	"sid": 914229451466728
}